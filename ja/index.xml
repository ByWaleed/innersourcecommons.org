<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>InnerSource Commons</title><link>https://innersourcecommons.org/ja/</link><description>Recent content on InnerSource Commons</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://innersourcecommons.org/ja/index.xml" rel="self" type="application/rss+xml"/><item><title>Trusted Committerの役割の紹介</title><link>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/01/</guid><description>Trusted Committer(TC)の役割は、InnerSourceコミュニティにおける重要な役割の1つです。 Trusted Committerは、重要な技術的決定や、最終的にコントリビューションをゴールまで導くためにコントリビューターのメンタリングを行う、あなたが信頼するコミュニティの人々だと考えてください。 Trusted Committerの役割は、要求が厳しくやりがいがあるものです。 それは単なる独断的なゲートキーパー以上のもので、あらゆるInnerSourceコミュニティの成功に役立ちます。
一般的に、Trusted Committerの役割は、権限ではなく責任によって定義されます。 非常に高いレベルでは、Trusted Committer達はInnerSourceコミュニティと、コミュニティが構築している製品の両方の利益を代表しています。 彼らはコミュニティと製品の両方の健全性に関心があります。 したがって、Trusted Committerとしては、技術指向とコミュニティ指向の両方の責任があります。 次のセクションでは、これらの両方の側面について説明します。</description></item><item><title>はじめに</title><link>https://innersourcecommons.org/ja/learn/learning-path/contributor/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/contributor/01/</guid><description>InnerSourceのコントリビューター あなたは、あなたの依存する機能を他チームがシステムに追加をする時間が無いために、次のコーディングタスクをブロックされたことはありませんか？ もしかすると、しばらくしてから、その不足している機能を補うために、あなたのプロジェクトで余計な作業をしなければならなかったかも知れません。 このような形で全くブロックされないことは、どんなに素晴らしいことでしょうか？
InnerSourceの原則を組み込んだプロジェクトでは、必要な機能を他のチームが提供するのを待ってブロックされることは決してありません。 もし必要なものが得られないなら、InnerSourceコントリビューターとして行動し、他チームのコードリポジトリに直接あなたが必要な変更を行うことかできます。
コントリビューターの役割は、InnerSourceコミュニティプロジェクトのリポジトリに貢献する人と表されます。 この人はコミュニティの一部の人であるかも知れないし、そうでないかも知れません。 しかし、かなりの数の人にとってコントリビューターとは、単にコミュニティについて知るだけのことから、コミュニティのプロダクトを使用し、コミュニティのメンバーと対話し、そして最終的に貢献を始めることができるという旅のようなものです。 最終的に、そのうち何人かは Trusted Committer (トラステッドコミッター) になるかも知れません。</description></item><item><title>はじめに</title><link>https://innersourcecommons.org/ja/learn/learning-path/introduction/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/introduction/01/</guid><description>このラーニングパスは、InnerSourceの紹介にあたるものです。 InnerSourceは、企業内のソフトウェア開発にオープンソースの実践と原則を適用したものです。 InnerSourceソフトウェアは、会社としてはプロプライエタリなものとなりますが、内部にはオープンで、誰もが利用したり貢献したりできるようになります。 この方法は、広範かつ効果的なコラボレーション、内部の多くのステークホルダーからの変化する要求に、迅速かつ軽快に対応することを可能とします。
このラーニングパスでは、InnerSourceを適用する良い候補となる状況を、どのように認識するかについて学びます。 私たちは、これらの状況でどのようにInnerSourceが活用できるか概略を示します。 それにより、あなたはInnerSourceについて議論する際の共通用語に詳しくなるでしょう。 私たちはまた、InnsrSourceの基礎となる主要な原則と、それが効果的に適用された時に得られる効果を列挙します。</description></item><item><title>InnerSourceによって解決される課題とは？</title><link>https://innersourcecommons.org/ja/learn/learning-path/introduction/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/introduction/02/</guid><description>InnerSourceは、企業の組織構造やその立場に関係なく、誰もがコードを再利用したりコラボレーションすることを推奨し、それに報いることができるものです。 このアプローチは、従来の組織に見られるアイデアや成果物を企業組織の階層やサイロの中に閉じ込めておくものとは異なるものです。 この考えについて実例をあげて見ていきましょう。
同じ会社にある二つのチームが、別々のソフトウェア部品を提供する時、片方のチームのソフトウェアが、もう一方のチームのソフトウェアに依存する状況を想像してください。 もう少し具体的にユーザエクスペリエンスを例にすると、表示用データを取得するAPIに依存するサービスがあります。 このような状況は、一つのチームが作成するソフトウェアが、数十人、数百人の利用される大企業では一般的なことです。
利用側のチームが多くの機能を必要とした時、提供側のチームは通常、どの機能から開発を進めるかを決めるために、ある種の要件や優先度付けを行うプロセスを持っています。 すぐに作業に取り掛かるため優先度が付けられていなかった重要な機能のリクエストのために、利用側のチームは通常、次に示す3つのオプションから一つを選択することになると思いますが、それぞれ欠点があります。
静観： 利用側のチームは何もせずにリスエストされた機能が無いために足を引っ張られるかもしれません。 このオプションは、利用側の作業を最小限にすることができます。 機能リクエストの効果に依存しているかもしれませんが、もしかすると待つだけで良いかもしれません。 しかし、これは苦痛を伴うかもしれません。要求された機能がいつまでたっても提供されない場合は、特に大きな苦痛を伴います。</description></item><item><title>InnerSourceコントリビューターになる</title><link>https://innersourcecommons.org/ja/learn/learning-path/contributor/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/contributor/02/</guid><description>InnerSourceのコントリビューターは、通常のチームの境界外で活動し、組織のサイロを横断するリンクになります。 そのため、彼らはこの作業をより効果あるものにするための、いくつかの共通の方法を意識する必要があります。
マインドセットの共有 それでは - あなたはチームの製品に、新しい機能を実装しています。 この機能を動作させるためには、いくつかの機能が必要です。 実装に直ぐに取り掛かる代わりに、少し落ち着いて考えます：この機能は一般的な課題なのだろうか？ それは、あなたの組織の他のチームが共有するビジネスドメインで同じように直面しているものなのか？ この機能は、あなたのプロジェクトのドメインと直交するものなのか？ もし当てはまる場合、自分のチームを超えて見渡して：あなたのニーズにフィットするために利用したり改善できる共通のソリューションがあるのか？ あるべきなのか？
ソリューションを共有するメリット アフリカには、 &amp;#8220;早く行きたいなら一人で行きなさい。遠くに行きたいなら一緒に行きなさい&amp;#8221;　という諺があります。これは、ソフトウェア開発チームにも同じです。</description></item><item><title>製品品質の確保</title><link>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/02/</guid><description>まず、Trusted Committerの役割に最もよく関連する責任、製品の品質を確保することから始めましょう。
InnerSourceのコミュニティでTrusted Committerたちは、すべての技術関連の意思決定、特に製品品質に関する意思決定の 権利を持っています 。 権利を持つということは、適切な決定が確実に実行されるようにする必要があるということを意味します。 これには、コミュニティ内外で意思疎通を図り、必要に応じてこれらの決定を支持することが含まれます。 しかし、Trusted Committerは、必ずしも技術関連の決定をすべて自分で行ったり、それを実装するためのすべての作業を行うわけではありません。
Trusted Committer の仕事は、彼らのコミュニティの品質基準を伝え、明確にし、 コントリビューター が理解でき、実行可能な形にそれらを策定することです。 これにはもちろん書面による文書も含まれますが、Trusted Committer がこれらの品質基準を伝える最も効果的な方法は、例示によるものです。 私たちは、InnerSourceコミュニティが開発をまとめる方法だけでなく、彼らが作成するソフトウェアの品質においても、従来のソフトウェア開発プロジェクトと差別化を図ることは価値ある目標であると考えています。 ソフトウェア品質の高さは、InnerSourceコミュニティのユーザとその管理者の信頼を確立し維持するために不可欠なものです。 私たちは皆、1つの悪いリリースが、この信頼を一瞬にして打ち砕いてしまうことを知っています。</description></item><item><title>どのようにInnerSourceは機能するのか？</title><link>https://innersourcecommons.org/ja/learn/learning-path/introduction/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/introduction/03/</guid><description>AチームがBチームから提供されるソフトウェアを利用する場合を例に考えてみましょう。 AチームはBチームに機能追加のリクエストを送ります、でもBチームはそれを期限内に実装してAチームにリリースすることはできません。 InnerSourceでは、もしAチームがこの要求機能を得ることができない場合、代わりにプルリクエストを送信します。 それは、AチームはBチームのソフトウェアに直接機能を実装してプルリクエストを送付することを意味します。 チームBは連携して送付されたコードをレビューして受け入れます。
この例において、チームAは ゲスト チーム、チームBは ホスト チームと呼ばれます。 ゲスト や ホスト の用語は、自宅にお客を招くような感覚で使われています。 この状況では、殆どの人は良いホストとなること期待しています。 彼らはゲストの到着を見越して、物事が整理整頓されていることを保証します。 訪問者は、ドアのところで迎えられて中に招かれます。</description></item><item><title>コミュニティの健全性維持</title><link>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/03/</guid><description>本章の導入で Trusted Committer には技術指向とコミュニティ指向の両方の責任があることを指摘しました。 それは、コードとコードの健全性だけに注目するだけでは不十分だということです。 長期的な成功を確実にするために、Trusted Committerはソフトウェアを構築するコミュニティの健全性維持にも努めるべきです。 そのためには、製品の品質を確保することと健全なコミュニティを育てることの間で、バランスを取る必要があります。
健全なコミュニティとはどのようなものでしょうか？ 簡単に言うと、健全なコミュニティでは、 コントリビューター はソフトウェア開発にほとんどの時間を費やすことができ、能力を高めることができます。 その結果、健全なコミュニティは、継続して成長することになります。
なぜ、 コントリビューター はコミュニティに参加して留まるのでしょうか？ コミュニティの目的や使命に賛同しているため、そうする人達がいます。 この目的を明確にして推進することが、Trusted Committer の仕事です。 この重要性は、認識されていないことが多いが、コミュニティとそのプロダクトをマーケティングすることは本当に重要です。</description></item><item><title>コントリビューターの心構え</title><link>https://innersourcecommons.org/ja/learn/learning-path/contributor/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/contributor/03/</guid><description>前のセグメントでは、あなたがコンポーネントを再利用してコントリビュータとして活動するようになるかの理由を説明しました。 この記事では、ホストチームのコードベースにあなたの変更をうまく提供する方法のベストプラクティスを共有します。
ホストチームに貢献しようとしているInnerSouceのコントリビュータは、基本的には彼らの家のゲストです。 一般的に、良いゲストは決められた方法で行動することが期待されています。
ドアをノックする
ハウスルールを予測して従う
家のオーナーではないことを理解し、それに応じた行動をする</description></item><item><title>InnerSourceの効果とは？</title><link>https://innersourcecommons.org/ja/learn/learning-path/introduction/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/introduction/04/</guid><description>InnerSourceによるコラボレーションには、多くの効果があります。 InnerSourceは、ゲストチームが長期メンテナンスの負担をせず、 彼らが必要な時に機能要求を手に入れる ためのスケーラブルな戦略を企業に提供します。 ゲストチームの時間を、他の人たちが利用できるコードに投入することが、会社全体としての勝利へとつながります。
この結果はInnerSoueceの優れた効果であると同時に、定常的にInnerSourceのコントリビューションを受け取るホストにも多くの効果があります。 InnerSourceのプロセスの一部には、ホストチームのプロダクトオーナーが、コントリビューションされた機能が正しくかつ望まれたものであることに、最初から同意していることを思い出してください。 InnerSourceは、それを利用する人達のために 良いプロダクトを作るための支援 をホストチームが受け取ることを可能にします!
InnerSourceはホストチームにスケーラブルな戦略を提供し 、多くの利用者たちからの、さまざまな機能要求に応えてゆくことが可能となります。 ホストチームのフルタイムメンバーの対応力が固定されているとした場合、時として、その利用者たちのビジネスロードマップの組み合せが、ホストチームの製品で非常に（または理不尽に）大量の作業を必要とすることにつながる可能性があります。 InnerSourceなしでは、こうした状況は、リーダーにエスカレーションされた多くの機能要求に対処する、過労とストレスに満ちたチームを簡単に生みだすことにつながります。</description></item><item><title>コミュニティメンバーのレベル向上</title><link>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/04/</guid><description>InnerSourceコミュニティへの参加には連続性があります。 コミュニティについて知らない人達がいます。 新規参加者 は、コミュニティとその製品に関心があるかもしれませんが、まだそれを使用していません。 消費者 は、ソフトウェアを使用しますが、コントリビューションしていない可能性があります。 次に、少なくとも一つはコントリビューションをしている コントリビューター がおり、最後にソフトウェアとコミュニティの両方に責任を持つ_Trusted Committers_ がいます。 Trusted Committer としては、この連続性に沿う形で個人を動かし、コントリビューションする能力を高めていく責任があります。 この意味で、Trusted Committer は、コミュニティにおけるフォースマルチプライヤーとして機能します。</description></item><item><title>コントリビューションの仕組み</title><link>https://innersourcecommons.org/ja/learn/learning-path/contributor/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/contributor/04/</guid><description>他のチームのプロジェクト/リポジトリに貢献を始める準備はできていますか？ マネージメント層へのエスカレーションではなく、コラボレーションでブロッカーを減らすことを楽しみにしていますか？ このセクションでは、InnerSourceに貢献する際に覚えておくべき落とし穴に焦点を当て、実践的なアドバイスを提供します。 これにより、あなたとホストチームが可能な限り快適な経験をすることを可能とし、より多くのコントリビューションと素晴らしいコラボレーションをするための基礎を築きます。
この記事は、あなたがおそらく経験する次の3つのステップに分かれています。
コントリビューションの機会を求め、それに取り組む準備をする
実際にコントリビューションするものを作成する
ギフトをキレイにして包み、ホストチームに提供する</description></item><item><title>InnerSourceのコントリビュータになるメリット</title><link>https://innersourcecommons.org/ja/learn/learning-path/contributor/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/contributor/05/</guid><description>コントリビュータはInnerSourceプロジェクトの生命線です。 InnerSourceプロジェクトとして実行されるすべてのプロジェクトには、開発チームを当初の創設者の枠を超えて拡大し、そのプロジェクトのユーザー（時に企業では顧客とも呼ばれる）間でさらなる協力者の可能性を利用するという見込みと究極の目標の両方があります。
しかし、個々の開発者がマネージャの指示を受けていないプロジェクトに対して時間を費やす動機は何でしょうか？ マネージャが、開発者に対して100%自分の管理下にないプロジェクトの改善に時間を作る動機となるものは何でしょうか？
個人の動機 最も自明な動機は、初期のコントリビューターをオープンソースに引き込むことです。
あなたが長い間回避してきた迷惑なバグを覚えていますか？ これらの回避策のメンテナンスに費やす時間とエネルギーは？ アップストリームチームが将来その問題を修正するのを待たずに、先に自分で問題を修正できるとしたらどうでしょうか？ この「自分の手で問題を解決する」状況が初めてのコントリビュータは、自分のコードベースの回避策の数を減らすために、日々の作業に依存するプロジェクトの問題を修正することから始めることがよくあります。
独自の回避策を維持するのではなく、修正を作成してコントリビューションするかどうかを決めるときには、そのコントリビューションが独自の変更の品質にもたらすメリットについて考えてください。 単独で作業する代わりに、アップストリームプロジェクトで作業する人は、あなたのソリューションをレビューするだけでなく改善することもできます。 サポートと指導を受けることで、開発作業が大幅にスピードアップします。</description></item><item><title>InnerSourceの原則</title><link>https://innersourcecommons.org/ja/learn/learning-path/introduction/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/introduction/05/</guid><description>会社、チーム、プロジェクト、そして個人はそれぞれ異ります。 ですので、InnerSoueceのコンセプトが実際に機能する正しい方法は、ある状況と他の状況とで異なるものになるでしょう。 しかし、InnerSouceの成功例の根底には4つの原則があります。 これらの原則は、オープンソースプロジェクトの成功からインスピレーションを得ており、InnerSourceが前に説明したような効果を得るために必要なものです。
これらの原則は次の通りです：
オープン性
透明性
優先的なメンターシップ</description></item><item><title>参入障壁を下げる</title><link>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/trusted-committer/05/</guid><description>InnerSourceコミュニティでコントリビューションを求めることは、いくつかの理由からオープンソースコミュニティよりも困難です。
InnerSourceコミュニティでは、潜在的な コントリビューター の数が少ない。
コントリビュータは、勤務時間内にコントリビューションしたいと考えるため、時間の制約が大きくなる。
InnerSourceでの作業は、コントリビュータの正式な目標管理の一部に必ずなるとは限らないため、InnerSourceの作業に費やす時間が目標達成を損なうように見える場合がある。
そのため、Trusted Committersにとって、 コントリビューター のオンボーディングやコントリビューション作成のプロセスを、できるだけスムーズにすることが重要となります。 役立つことがいくつかあります。</description></item><item><title>おわりに</title><link>https://innersourcecommons.org/ja/learn/learning-path/contributor/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/contributor/06/</guid><description>InnerSourceラーニングパス、コントリビュータセグメントをご覧いただきありがとうございます。 このセクションでは、InnerSourceプロジェクトの生命線となる、コントリビュータの役割について学びました。 コントリビュータは、コンポーネント所有者の外側にあり、プロジェクトに追加の貴重な情報をもたらします。
このセクションでは、コントリビューションする機会を見つけてコントリビュータになる方法について学びました。 そのような機会を見つけたり作ったりするのに必要な考え方や習慣について見直しました。 また、その役割の心構えと、コントリビューションを成功に導く可能性のあるアプローチについても説明しました。
正しい考え方や、習慣、心構えをしていても、コントリビューションの成功を妨げるものがいくつかあります。そのため、それらの要点について、詳細を説明しました。
最後に、あなたのチームメイトや組織のさまざまなレベルを説得することが難しい場合があるため、このプロセスを簡単にするために、さまざまな観点からコントリビューションのメリットを詳細に説明しました。
あなたが記事を読んだりビデオを見たりすることを楽しみ、InnerSourceと良いコントリビュータになることに向けた旅のために、興味深く新しい洞察をいくつか得ることができることを願っています。
もし、まだそうしていない場合は、InnerSourceラーニングパス( http://innersourcecommons.</description></item><item><title>おわりに</title><link>https://innersourcecommons.org/ja/learn/learning-path/introduction/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://innersourcecommons.org/ja/learn/learning-path/introduction/06/</guid><description>このラーニングパスでは、InnerSourceの紹介をしました。 InnerSourceは、企業内のソフトウェア開発にオープンソースのベストプラクティスと原則を適用したものです。 これは、提供側のチームが必要な機能要件を提供することができない時に、利用者に追加オプションを提供するものです。 InnroSourceの成功には、 ホストチーム の プロダクトオーナー と トラステッドコミッター 、そして ゲストチーム の コントリビューター が関わります。 効果的に行うと、InnerSourceは両方の参加チームに多くの効果をもたらします。 効果的なInnerSource実施の主要な原則は、 自発的なコードコントリビューション と 優先的なメンターシップ です。</description></item></channel></rss>